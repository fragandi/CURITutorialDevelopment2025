<?xml version='1.0' encoding='utf-8'?>
<chapter xml:id="ch-jupyter">
  <title>Jupyter Notebooks</title>
  <introduction>
    <p>
In <xref ref="sec-run-code"/> you wrote and ran a few short
scripts in various programming languages. But often, we want
to not only be able to write and execute code, but do so
piece-by-piece, and share the results with other people
without requiring them to run the code themselves...
    </p>
  </introduction>
  <section xml:id="sec-intro-to-jupyter">
    <title>Intro to Jupyter</title>
    <definition xml:id="def-jupyter">
      <statement>
        <p>
A <term>Jupyter notebook</term> is a file that stores
commentary, code, and output in an all-in-one format suitable for
sharing with other people.
        </p>
      </statement>
    </definition>
    <p>
Jupyter is a popular open-source tool used in
data science, scientific computing, and computational journalism.
Various online platforms allow you to create, edit, and share Jupyter notebooks.
If you have a Google account, Google Colab allows you to easily create 
Jupyter notebooks that are stored in your Google Drive:
<url href="https://colab.research.google.com/"/>.
Of course, you can also create Jupyter notebooks using GitHub, 
which provides a Codespace ready for running Jupyter notebooks
out of the box:
<url href="https://github.com/github/codespaces-jupyter/"/>.
    </p>
  </section>
  <section xml:id="sec-google-colab">
    <title>Jupyter Notebooks on Google Colab</title>
    <p>
    To get started with Google Colab, go to <url href="https://colab.research.google.com/"/>. 
    You should see a welcome screen that allows you to create a new notebook, 
    open an example notebook, or load a notebook from Google Drive or GitHub.
    </p>
    <p>
    You may open <url href="https://colab.research.google.com/drive/1xTAUoxWmz1pWdGVuCMP5UYZkN_ASToqr?usp=sharing">this sample notebook</url> in Google Colab.
    This notebook provides a Python simulation of the famous <em>birthday problem</em>. 
    Observe that the notebook contains both Markdown cells and code cells, as described in <xref ref="sec-cells"/>.
    To run a code cell, first click in the cell, then either click the "play" symbol at the left of the cell or press SHIFT-ENTER.
    The first time you run a code cell, Colab will start a Python runtime environment 
    (a <em>kernel</em>, as described in <xref ref="sec-jupyter-kernel"/>), which only takes a few seconds to start up.
    </p>
  </section>
  <section xml:id="sec-github-codespaces-jupyter">
    <title>GitHub's Jupyter Codespace</title>
    <p>
Let's begin by going to
<url href="https://github.com/github/codespaces-jupyter/">
  github/codespaces-jupyter</url>
directly. Before we dive into editing a notebook ourselves,
we can first browse the <c>notebooks</c> directory on
the repository page. We see three files, each with the
extension <c>*.ipynb</c>
(short for <q><em>IPY</em>thon <em>N</em>ote<em>B</em>ook</q>,
Jupyter's original name).
    </p>
    <p>
Clicking on each file, you'll note that while there's code,
most of the file is actually narrative and visualization.
That's the appeal of Jupyter for many people: it's about
communicating <em>stories</em>, not just data or software.
    </p>
    <p>
Additionally, you'll see a <c>data</c> directory, which
includes a <c>*.csv</c> <em>C</em>omma <em>S</em>eparated
<em>V</em>alues spreadsheet. This file can be read into a
notebook for analysis.
    </p>
    <p>
Now, let's follow the instructions of the repository's
README file (<xref ref="remark-readme"/>). As of writing,
it recommends to just use the <c>Code</c> button to open
a Codespace, without needing to fork (<xref ref="sec-forks"/>)
the repository. This allows you to <q>try out</q> the Codespace
without saving your work long-term, but you can still create a fork
with your changes later if you decide to.
    </p>
  </section>
  <section xml:id="sec-jupyter-kernel">
    <title>Kernels</title>
    <p>
At the core of any Jupyter notebook is its <q>kernel</q>.
    </p>
    <definition xml:id="def-kernel">
      <statement>
        <p>
The <term>kernel</term> of a Jupyter notebook is a process that wires up
a notebook to a particular programming language.
        </p>
      </statement>
    </definition>
    <p>
Kernels for several different programming languages exist. We will use
a Python kernel in this book, not least of which because it's one of the
most commonly used kernels, and the kernel that's already set up for use
with the GitHub Jupyter Codespace repo.
    </p>
    <p>
In your Codespace, use the <q>Select kernel</q> button, to choose
a <q>Python environment</q>. You should be able to select the default
global environment without needing to create a new one. Your notebook
is ready once you see <c>Python 3.x.y</c> (for some values of <m>x,y</m>)
in the upper-right corner of the notebook.
    </p>
  </section>
  <section xml:id="sec-cells">
    <title>Cells</title>
    <p>
A notebook is composed of many consecutive parts, known as <q>cells</q>.
    </p>
    <definition xml:id="def-cells">
      <statement>
        <p>
A <term>cell</term> of a notebook encapsulates either
commentary/documentation (as a <term>Markdown cell</term>) or
code (as a <term>Code cell</term>). Cells can be rearranged,
inserted, cut, pasted, and so on.
        </p>
      </statement>
    </definition>
    <p>
Each Markdown cell uses, well, Markdown (<xref ref="def-markdown"/>)
to describe content that should be displayed to the reader, similar
to a README file in your repository.
    </p>
    <p>
But it's the Code cells that set a notebook apart. Each Code cell
in a notebook is run consecutively, with the result of the final
line of code being displayed for the reader. Importantly, these
outputs are saved to the notebook itself, meaning that by sharing
the notebook with a colleague, they can see the output of your
code without running it themselves! This is not only convenient,
but it's essential when communicating the result of code that
uses software your reader does not have installed themselves.
Likewise, it allows for showing the results of code via a web
browser, such as at
<url href="https://github.com/github/codespaces-jupyter/blob/main/notebooks/image-classifier.ipynb">this link</url>.
    </p>
  </section>
  <section xml:id="sec-sample-notebook">
    <title>A sample notebook</title>
    <p>
I've provided a
<dataurl source="first-notebook.ipynb">sample notebook</dataurl>
that you can upload to your Codespace to experiment with.
    </p>
  </section>
  <section xml:id="sec-big-data">
    <title>Handling big datasets</title>
    <p>
A (possible) disadvantage of using Codespaces compared to your
own computer is that all processing happens in the cloud, so
you're limited by the resources made available to you by
GitHub. But <xref ref="remark-change-machine-type"/> describes
how to beef up your Codespace with more resources, should you
need to crunch a particularly large dataset.
    </p>
  </section>
  <section xml:id="sec-r-jupyter">
    <title>Using R with Jupyter</title>
    <p>
To use R instead of Python with your Jupyter notebook,
a custom dev container (<xref ref="sec-custom-codespaces"/>)
configured for R notebooks is available at
<url href="https://github.com/revodavid/devcontainers-rstudio"/>.
    </p>
  </section>
</chapter>